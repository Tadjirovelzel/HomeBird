#include <Arduino.h>
#include "bme280.h"
#include "Wire.h"
#include "i2c.h"

#include <SPI.h>
#include <SD.h>
#include <EEPROM.h>

#include "LowPower.h" // Library for deepsleep
#include <PMserial.h> // Arduino library for PM sensors with serial interface

File file;

SerialPM pms(PMS5003, 8, 9); //RX = 8, TX = 9

String file_path = "/sensor_data.txt";

////
// EEPROM:
//   register 0: state
//   register 1: count

void write_to_file(uint8_t* BME280_calibration, uint8_t* BME280_temperature, uint8_t* BME280_pressure);
void write_uint8_t_array_to_file_hex(File file, uint8_t* array, int length);
void write_uint16_t_array_to_file_hex(File file, uint16_t* array, int length);
String uint8_t_array_to_string_hex(uint8_t* array, int length);
String uint16_t_array_to_string_hex(uint16_t* array, int length);
String uint8_t_to_hex(uint8_t data);
String uint16_t_to_hex(uint16_t data);
String uint32_t_to_hex(uint32_t data);

void setup() {
  switch(EEPROM.read(0)){
    case 0:
      pms.init();
      pms.wake(); //wake pms

      EEPROM.update(0, 1); //set state to state 1
      LowPower.deepSleep(30000);
      break;
    case 2:

      EEPROM.update(1, EEPROM.read(1) + 1); //count = count + 1
      Serial.begin(115200);

      if (SD.begin(6)) {
        Serial.println("SD card initialized");
      }else{
        Serial.println("SD card initialization failed!");
      }

      pms.init();  //reinit, just to be sure
      pms.wake();
      pms.read();
      pms.sleep();

      BME280::init();
      BME280::measure();
      delay(1);
      uint8_t BME280_calibration[24];
      uint8_t BME280_temperature[3];
      uint8_t BME280_pressure[3];
      BME280::read_calibration(BME280_calibration);
      BME280::read_temperature(BME280_temperature);
      BME280::read_pressure(BME280_pressure);

      Serial.println(uint8_t_array_to_string_hex(BME280_calibration, 24) + " " + uint8_t_array_to_string_hex(BME280_temperature, 3) + " " + uint8_t_array_to_string_hex(BME280_pressure, 3) + " " + uint16_t_array_to_string_hex(pms.data, 9) + " " + uint32_t_to_hex(EEPROM.read(1)));

      write_to_file(BME280_calibration, BME280_temperature, BME280_pressure);

      EEPROM.update(0, 0); //set state to state 0
      LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
      break;
    default:
      //ERROR, program should not be able to reach this point, continue to recover
      break;
  }
  //ERROR, program should not be able to reach this point
  EEPROM.update(0, 0); //recover to state 0
  LowPower.deepSleep(1);
}

void loop() {
}

void write_to_file(uint8_t* BME280_calibration, uint8_t* BME280_temperature, uint8_t* BME280_pressure){
  if(file = SD.open(file_path, FILE_WRITE)){
    write_uint8_t_array_to_file_hex(file, BME280_calibration, 24);
    file.print(" ");
    write_uint8_t_array_to_file_hex(file, BME280_temperature, 3);
    file.print(" ");
    write_uint8_t_array_to_file_hex(file, BME280_pressure, 3);
    file.print(" ");
    write_uint16_t_array_to_file_hex(file, pms.data, 9);
    file.print(" ");
    file.println(uint32_t_to_hex(EEPROM.read(1)));
    file.close();
  }
}

void write_uint8_t_array_to_file_hex(File file, uint8_t* array, int length){
  file.print(uint8_t_array_to_string_hex(array, length));
}

void write_uint16_t_array_to_file_hex(File file, uint16_t* array, int length){
  file.print(uint16_t_array_to_string_hex(array, length));
}

String uint8_t_array_to_string_hex(uint8_t* array, int length){
  String s = "";
  for(int i = 0; i < length; i++){
    s += uint8_t_to_hex(*array); //write data pointer is pointing to to file
    array++; //pointer needs to point to next data address
  }
  return s;
}

String uint16_t_array_to_string_hex(uint16_t* array, int length){
  String s = "";
  for(int i = 0; i < length; i++){
    s += uint16_t_to_hex(*array); //write data pointer is pointing to to file
    array++; //pointer needs to point to next data address
  }
  return s;
}

String uint8_t_to_hex(uint8_t data){
  return (String("0123456789ABCDEF"[data >> 4]) + String("0123456789ABCDEF"[data & 0x0F]));
}

String uint32_t_to_hex(uint32_t data){
  return uint8_t_to_hex(data >> 24) + uint8_t_to_hex(data >> 16) + uint8_t_to_hex(data >> 8) + uint8_t_to_hex(data);
}

String uint16_t_to_hex(uint16_t data){
  return uint8_t_to_hex(data >> 8) + uint8_t_to_hex(data);
}